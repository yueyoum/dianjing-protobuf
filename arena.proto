package Dianjing.protocol;

import "package.proto";
import "match.proto";
import "formation.proto";

message ArenaRival {
    required string id = 1;
    required string name = 2;
    required int32 club_flag = 3;
    required int32 level = 4;
    required int32 power = 5;
    required int32 rank = 6;
    required int32 score = 7;
}

message ArenaNotify {
    required bytes session = 1;
    optional ArenaRival rival = 2;
    required int32 my_rank = 3;
    required int32 remained_match_times = 4;  // 剩余挑战次数
    required int32 refresh_cd = 5;
    required int32 remained_refresh_times = 6;  // 剩余刷新次数
    required int32 refresh_cost = 7;            // 强制刷新花费
    required int32 remained_buy_times = 8;
    required int32 buy_cost = 9;
    required int32 point = 10;      // 积分
    required int32 max_rank = 11;   // 历史最高名次
    required int32 my_score = 12;
}

message ArenaRefreshRequest {
    required bytes session = 1;
}

message ArenaRefreshResponse {
    required int32 ret = 1;
    required bytes session = 2;
}

message ArenaBuyTimesRequest {
    required bytes session = 1;
}

message ArenaBuyTimesResponse {
    required int32 ret = 1;
    required bytes session = 2;
}

message ArenaMatchStartReqeust {
    required bytes session = 1;
    repeated SyncFormationSlot slots = 2;
}

message ArenaMatchStartResponse {
    required int32 ret = 1;
    required bytes session = 2;
    optional ClubMatch match = 3;
}

message ArenaMatchReportReqeust {
    required bytes session = 1;
    required string key = 2;
    required bool win = 3;
}

message ArenaMatchReportResponse {
    required int32 ret = 1;
    required bytes session = 2;
    optional Drop drop = 3;
    optional int32 score_changed = 4;
    optional int32 rank_changed = 5;
    optional int32 max_rank = 6;   // 历史最高名次
    optional int32 my_rank = 7;
    optional int32 my_score = 8;
}

message ArenaLeaderBoardRequest {
    required bytes session = 1;
}

message ArenaLeaderBoardResponse {
    required int32 ret = 1;
    required bytes session = 2;
    repeated ArenaRival rival = 3;
}


enum ArenaHonorStatus {
    ARENA_HONOR_CAN_NOT = 0;
    ARENA_HONOR_CAN_GET = 1;
    ARENA_HONOR_ALREADY_GOT = 2;
}

message ArenaHonorStatusNotify {
    message HonorStatus {
        required int32 honor = 1;
        required ArenaHonorStatus status = 2;
    }

    required bytes session = 1;
    required int32 my_honor = 2;
    repeated HonorStatus honors = 3;
}

message ArenaHonorGetRewardRequest {
    required bytes session = 1;
    required int32 honor = 2;
}

message ArenaHonorGetRewardResponse {
    required int32 ret = 1;
    required bytes session = 2;
    optional Drop drop = 3;
}


message ArenaMatchLogNotify {
    message Log {
        required int32 id = 1;
        repeated string arguments = 2;
    }

    required bytes session = 1;
    repeated Log logs = 2;
}
